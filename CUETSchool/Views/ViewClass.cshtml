@model IEnumerable<CUETSchool.Models.Result>
@using System.Text.Json

<h1>Students of @ViewBag.Subject (Class @ViewBag.Class)</h1>

<!-- Input field for Full Marks -->

<!-- Input field for Full Marks -->
@* <div>
    <label for="fullMarks">Full Marks:</label>
    <input type="number" id="fullMarks" value="@ViewBag.FullMarks" min="1" disabled />
    <button class="btn btn-primary edit-btn" id="editFullMarksBtn">Edit</button>
    <button class="btn btn-success save-btn" id="saveFullMarksBtn" style="display: none;">Save</button>
    
</div> *@
<div>
    <label for="fullMarks">Full Marks:</label>
    <form method="post" action="@Url.Action("UpdateFullMarks", "Teacher")">
        <input type="number" id="fullMarks" name="fullMarks" value="@ViewBag.FullMarks" min="1" />
        <input type="hidden" name="subject" value="@ViewBag.Subject" />
        <input type="hidden" name="className" value="@ViewBag.Class" />
        <button type="submit" class="btn btn-success">Save</button>
    </form>
</div>




<!-- Link to Add Column Page -->
<a href="@Url.Action("AddColumn", "Teacher", new { subject = ViewBag.Subject, className = ViewBag.Class })">
    <button>Add Column</button>
</a>

<table class="table" id="studentTable">
    <thead>
        <tr>
            <th>Student ID</th>
            @foreach (var column in (HashSet<string>)ViewBag.AllColumns)
            {
                <th>@column</th>
            }
            <th>Total Marks</th>
            <th>Percentage</th>
            <th>Grade</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in Model)
        {
            var marks = new Dictionary<string, int>();
            if (!string.IsNullOrEmpty(student.MarksJson))
            {
                try
                {
                    marks = JsonSerializer.Deserialize<Dictionary<string, int>>(student.MarksJson) ?? new Dictionary<string, int>();
                }
                catch (JsonException)
                {
                    marks = new Dictionary<string, int>();
                }
            }

            <tr id="student-@student.Id">
                <td>@student.StudentId</td>

                @foreach (var column in (HashSet<string>)ViewBag.AllColumns)
                {
                    <td>
                        <input type="number" class="form-control dynamic-input"
                               name="Marks[@column]" value="@(marks.ContainsKey(column) ? marks[column] : 0)" />
                    </td>
                }

                <td class="totalMarks">@(student.TotalMarks.HasValue ? student.TotalMarks.Value : 0)</td>
                <td class="percentage">0%</td>
                <td class="grade">@(string.IsNullOrEmpty(student.Grade) ? "N/A" : student.Grade)</td>
                <td>
                    <button class="btn btn-primary edit-btn" data-id="@student.Id">Edit</button>
                    <button class="btn btn-success save-btn" data-id="@student.Id" style="display: none;">Save</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>
        // document.addEventListener("DOMContentLoaded", function () {
        //     Function to calculate grades based on percentage
        //     function calculateGrade(percentage) {
        //         if (percentage >= 80) return "A+";
        //         else if (percentage >= 75) return "A";
        //         else if (percentage >= 70) return "A-";
        //         else if (percentage >= 65) return "B+";
        //         else if (percentage >= 60) return "B";
        //         else if (percentage >= 55) return "B-";
        //         else if (percentage >= 50) return "C+";
        //         else if (percentage >= 45) return "C";
        //         else if (percentage >= 40) return "D";
        //         else return "F";
        //     }

        //     Function to update total marks, percentage, and grade
        //     function updateResults(row) {
        //         let fullMarks = parseInt(document.getElementById("fullMarks").value) || 100;
        //         let totalMarks = 0;

        //         row.querySelectorAll(".dynamic-input").forEach(input => {
        //             totalMarks += parseInt(input.value) || 0;
        //         });

        //         Calculate percentage and update the UI
        //         let percentage = (totalMarks / fullMarks) * 100;
        //         row.querySelector(".totalMarks").innerText = totalMarks;
        //         row.querySelector(".percentage").innerText = percentage.toFixed(2) + "%";
        //         row.querySelector(".grade").innerText = calculateGrade(percentage);
        //     }

        //     Event listener for Full Marks input change
        //     document.getElementById("fullMarks").addEventListener("input", function () {
        //         document.querySelectorAll("tbody tr").forEach(row => {
        //             updateResults(row);
        //         });
        //     });

        //     Event listeners for student marks input change
        //     document.querySelectorAll(".dynamic-input").forEach(input => {
        //         input.addEventListener("input", function () {
        //             updateResults(this.closest("tr"));
        //         });
        //     });

        //     Edit button functionality for each row
        //     document.querySelectorAll('.edit-btn').forEach(button => {
        //         button.addEventListener('click', function () {
        //             const row = this.closest('tr');
        //             row.querySelectorAll('input').forEach(input => input.disabled = false);
        //             row.querySelector('.save-btn').style.display = 'inline-block';
        //             this.style.display = 'none';

        //             Make FullMarks input editable when row is edited
        //             document.getElementById("fullMarks").disabled = false; Enable FullMarks field
        //             document.getElementById("editFullMarksBtn").style.display = 'none'; Hide Edit button
        //             document.getElementById("saveFullMarksBtn").style.display = 'inline-block'; Show Save button
        //         });
        //     });

        //     Save button functionality for each row
        //     document.querySelectorAll('.save-btn').forEach(button => {
        //         button.addEventListener('click', function () {
        //             const row = this.closest('tr');
        //             const id = this.getAttribute('data-id');

        //             let marks = {};
        //             row.querySelectorAll('input').forEach(input => {
        //                 marks[input.name.replace("Marks[", "").replace("]", "")] = parseInt(input.value) || 0;
        //             });

        //             Send the updated marks to the server
        //             fetch('@Url.Action("Edit", "Teacher")', {
        //                 method: 'POST',
        //                 headers: { 'Content-Type': 'application/json' },
        //                 body: JSON.stringify({ Id: id, MarksJson: JSON.stringify(marks) })
        //             })
        //             .then(response => response.json())
        //             .then(data => {
        //                 if (data.success) {
        //                     row.querySelector('.totalMarks').innerText = data.totalMarks;
        //                     let fullMarks = parseInt(document.getElementById("fullMarks").value) || 100;
        //                     let percentage = (data.totalMarks / fullMarks) * 100;
        //                     row.querySelector('.percentage').innerText = percentage.toFixed(2) + "%";
        //                     row.querySelector('.grade').innerText = calculateGrade(percentage);

        //                     Disable inputs again and toggle buttons
        //                     row.querySelectorAll('input').forEach(input => input.disabled = true);
        //                     this.style.display = 'none';
        //                     row.querySelector('.edit-btn').style.display = 'inline-block';
        //                 }
        //             });
        //         });
        //     });

        //                 Edit/Save functionality for Full Marks
        //     document.getElementById("editFullMarksBtn").addEventListener('click', function () {
        //         const fullMarksInput = document.getElementById("fullMarks");
        //         fullMarksInput.disabled = false; Enable Full Marks input field
        //         this.style.display = 'none'; Hide Edit button
        //         document.getElementById("saveFullMarksBtn").style.display = 'inline-block'; Show Save button
        //     });

        //     document.getElementById("saveFullMarksBtn").addEventListener('click', function () {
        //         const fullMarksInput = document.getElementById("fullMarks");
        //         const fullMarks = parseInt(fullMarksInput.value) || 100; Get the Full Marks value

        //         Send the updated Full Marks to the server
        //         fetch('@Url.Action("UpdateFullMarks", "Teacher")', {
        //             method: 'POST',
        //             headers: { 'Content-Type': 'application/json' },
        //             body: JSON.stringify({ FullMarks: fullMarks, subject: '@ViewBag.Subject', className: '@ViewBag.Class' })
        //         })
        //         .then(response => response.json())
        //         .then(data => {
        //             if (data.success) {
        //                 Update results in the table
        //                 document.querySelectorAll("tbody tr").forEach(row => {
        //                     updateResults(row);
        //                 });

        //                 Hide Save button and disable Full Marks input
        //                 fullMarksInput.disabled = true;
        //                 this.style.display = 'none';
        //                 document.getElementById("editFullMarksBtn").style.display = 'inline-block'; Show Edit button again
        //             }
        //         });
        //     });
        // });
                document.addEventListener("DOMContentLoaded", function () {
            // Function to calculate grades based on percentage
            function calculateGrade(percentage) {
                if (percentage >= 80) return "A+";
                else if (percentage >= 75) return "A";
                else if (percentage >= 70) return "A-";
                else if (percentage >= 65) return "B+";
                else if (percentage >= 60) return "B";
                else if (percentage >= 55) return "B-";
                else if (percentage >= 50) return "C+";
                else if (percentage >= 45) return "C";
                else if (percentage >= 40) return "D";
                else return "F";
            }

            // Function to update total marks, percentage, and grade
            function updateResults(row) {
                let fullMarks = parseInt(document.getElementById("fullMarks").value) || 100;
                let totalMarks = 0;

                row.querySelectorAll(".dynamic-input").forEach(input => {
                    totalMarks += parseInt(input.value) || 0;
                });

                // Calculate percentage and update the UI
                let percentage = (totalMarks / fullMarks) * 100;
                row.querySelector(".totalMarks").innerText = totalMarks;
                row.querySelector(".percentage").innerText = percentage.toFixed(2) + "%";
                row.querySelector(".grade").innerText = calculateGrade(percentage);
            }

            // Event listener for Full Marks input change
            document.getElementById("fullMarks").addEventListener("input", function () {
                document.querySelectorAll("tbody tr").forEach(row => {
                    updateResults(row);
                });
            });

            // Event listeners for student marks input change
            document.querySelectorAll(".dynamic-input").forEach(input => {
                input.addEventListener("input", function () {
                    updateResults(this.closest("tr"));
                });
            });

            // Edit button functionality for each row
            document.querySelectorAll('.edit-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const row = this.closest('tr');
                    row.querySelectorAll('input').forEach(input => input.disabled = false); // Enable input fields
                    row.querySelector('.save-btn').style.display = 'inline-block'; // Show Save button
                    this.style.display = 'none'; // Hide Edit button

                    // Make FullMarks input editable when row is edited
                    document.getElementById("fullMarks").disabled = false; // Enable FullMarks field
                    document.getElementById("editFullMarksBtn").style.display = 'none'; // Hide Edit button for FullMarks
                    document.getElementById("saveFullMarksBtn").style.display = 'inline-block'; // Show Save button for FullMarks
                });
            });

            // Save button functionality for each row
            document.querySelectorAll('.save-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const row = this.closest('tr');
                    const id = this.getAttribute('data-id');

                    let marks = {};
                    row.querySelectorAll('input').forEach(input => {
                        marks[input.name.replace("Marks[", "").replace("]", "")] = parseInt(input.value) || 0;
                    });

                    // Send the updated marks to the server
                    fetch('@Url.Action("Edit", "Teacher")', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ Id: id, MarksJson: JSON.stringify(marks) })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            row.querySelector('.totalMarks').innerText = data.totalMarks;
                            let fullMarks = parseInt(document.getElementById("fullMarks").value) || 100;
                            let percentage = (data.totalMarks / fullMarks) * 100;
                            row.querySelector('.percentage').innerText = percentage.toFixed(2) + "%";
                            row.querySelector('.grade').innerText = calculateGrade(percentage);

                            // Disable inputs again and toggle buttons
                            row.querySelectorAll('input').forEach(input => input.disabled = true);
                            this.style.display = 'none';
                            row.querySelector('.edit-btn').style.display = 'inline-block';
                        }
                    });
                });
            });

            // Edit/Save functionality for Full Marks
            document.getElementById("editFullMarksBtn").addEventListener('click', function () {
                const fullMarksInput = document.getElementById("fullMarks");
                fullMarksInput.disabled = false; // Enable Full Marks input field
                this.style.display = 'none'; // Hide Edit button
                document.getElementById("saveFullMarksBtn").style.display = 'inline-block'; // Show Save button
            });

            document.getElementById("saveFullMarksBtn").addEventListener('click', function () {
                const fullMarksInput = document.getElementById("fullMarks");
                const fullMarks = parseInt(fullMarksInput.value) || 100; // Get the Full Marks value

                // Send the updated Full Marks to the server
                fetch('@Url.Action("UpdateFullMarks", "Teacher")', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ FullMarks: fullMarks, subject: '@ViewBag.Subject', className: '@ViewBag.Class' })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Update results in the table
                        document.querySelectorAll("tbody tr").forEach(row => {
                            updateResults(row);
                        });

                        // Hide Save button and disable Full Marks input
                        fullMarksInput.disabled = true;
                        this.style.display = 'none';
                        document.getElementById("editFullMarksBtn").style.display = 'inline-block'; // Show Edit button again
                    }
                });
            });
        });

    </script>
}
